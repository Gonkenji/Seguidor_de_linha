// Define os pinos de controle do multiplexador e o pino de entrada analogica
const int ADC_PIN = 28;  // Pino analogico para ler o valor do sensor
const int S0_PIN = 16;   // Pino de controle A (Pino 11 do CD4051B)
const int S1_PIN = 17;   // Pino de controle B (Pino 10 do CD4051B)
const int S2_PIN = 18;   // Pino de controle C (Pino 9 do CD4051B)
const int Bcalibrar = 19; // Bot√£o de calibragem

int* dadosSL(void);

int* calibragemSL(void);

void printSL(void);

void setup() {
  // Inicia a comunicacao serial para exibir os dados no Plotter Serial
  Serial.begin(115200);
  delay(1000);

  // Configura os pinos de controle do multiplexador como saida
  pinMode(S0_PIN, OUTPUT);
  pinMode(S1_PIN, OUTPUT);
  pinMode(S2_PIN, OUTPUT);

  // Configura o pino analogico como entrada
  pinMode(ADC_PIN, INPUT);
}

void loop() {
  
  printSL();

  if (digitalRead(Bcalibrar) == 1){
    while (digitalRead(Bcalibrar)){
      Serial.print(digitalRead(Bcalibrar));
    } 
      calibragemSL();
  }
}

int* calibragemSL(){
  int calibrado = 0;
  int* sensor = dadosSL();
  int maxmin[8][2]; 
  static int referencia[8];

  for (int channel = 0; channel < 8; channel++) 
    maxmin[channel][0] = maxmin[channel][1] = sensor[channel];

  while (calibrado < 1000){
    dadosSL();

    for (int channel = 0; channel < 8; channel++) {
      if (sensor[channel] < maxmin[channel][1]) 
        maxmin[channel][1] = sensor[channel];
      
      else if (sensor[channel] > maxmin[channel][0])
        maxmin[channel][0] = sensor[channel];
      
      else
        calibrado++;
    }
  }

  for (int channel = 0; channel < 8; channel++)
    referencia[channel] = (maxmin[channel][1] + maxmin[channel][0])/2;

  return referencia;
}

int* dadosSL(){
  static int sensor[8];

  for (int channel = 0; channel < 8; channel++) {
      // Seleciona o canal do multiplexador.
      digitalWrite(S0_PIN, (channel >> 0) & 0x01);
      digitalWrite(S1_PIN, (channel >> 1) & 0x01);
      digitalWrite(S2_PIN, (channel >> 2) & 0x01);

      // Aguarda um pequeno tempo para o multiplexador estabilizar
      delay(5);
      
      // Le o valor do sensor no canal selecionado e armazena no array
      sensor[channel] = analogRead(ADC_PIN);
    }
  return sensor;
}

void printSL(){
  int sensorA[8];
  int* sensor = dadosSL();

  // Imprime os 8 valores do array na mesma linha
  for (int channel = 0; channel < 8; channel++) {
    Serial.print(sensor[channel]*0.05 + sensorA[channel]*0.95);
    sensorA[channel] = sensor[channel];
    Serial.print('\t'); // Usa tabulacao para separar os valores
  }

  Serial.println(); // Pula uma linha no final de cada varredura completa

  // Atraso para nao sobrecarregar a porta serial
  delay(50);
}
